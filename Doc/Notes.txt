
- URLs :

	https://docs.microsoft.com/en-us/windows/communitytoolkit/mvvm/introduction
	https://xamlbrewer.wordpress.com/2020/11/16/a-lap-around-the-microsoft-mvvm-toolkit/

- Dependency Injection

	- Dependency inversion
	https://docs.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/architectural-principles#dependency-inversion

	- Dependency injection in .NET
	https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection

	- Microsoft.Extensions.DependencyInjection Namespace 
	https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection?view=dotnet-plat-ext-6.0

	- Scope Validation
	https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#scope-validation

	- IServiceScopeFactory 

- .NET Generic Host 
	https://docs.microsoft.com/en-us/dotnet/core/extensions/generic-host#host-configuration

- IHostedService
	
	IHostedService Interface
	https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.ihostedservice?view=dotnet-plat-ext-6.0

	exemple :

	static IHostBuilder CreateHostBuilder(string[] args) =>
		Host.CreateDefaultBuilder(args)
			.ConfigureServices((_, services) =>
				services.AddHostedService<Worker>()
						.AddScoped<IMessageWriter, LoggingMessageWriter>());

	https://docs.microsoft.com/en-us/dotnet/architecture/microservices/multi-container-microservice-net-applications/background-tasks-with-ihostedservice


- ServiceCollectionServiceExtensions

public static IServiceCollection AddScoped (this IServiceCollection services, 
											Type serviceType);

public static IServiceCollection AddScoped (this IServiceCollection services, 
											Type serviceType, 
											Func<IServiceProvider,object> implementationFactory);

public static IServiceCollection AddScoped (this IServiceCollection services, 
											Type serviceType, 
											Type implementationType);

public static IServiceCollection AddScoped<TService,TImplementation> (this IServiceCollection services) 
											where TService : class 
											where TImplementation : class, TService;

public static IServiceCollection AddScoped<TService,TImplementation> (this IServiceCollection services, 
											Func<IServiceProvider,TImplementation> implementationFactory) 
											where TService : class 
											where TImplementation : class, TService;

public static IServiceCollection AddScoped<TService> (this IServiceCollection services) 
											where TService : class;

public static IServiceCollection AddScoped<TService> (this IServiceCollection services, 
											Func<IServiceProvider,TService> implementationFactory) 
											where TService : class;

- ServiceCollectionDescriptorExtensions

public static IServiceCollection Add(this IServiceCollection collection, 
											IEnumerable<ServiceDescriptor> descriptors);

public static void TryAddScoped<TService> (this IServiceCollection services, 
											Func<IServiceProvider,TService> implementationFactory) 
											where TService : class;

- ServiceProviderServiceExtensions

public static T? GetService<T>(this IServiceProvider provider)
...

- ActivatorUtilities 

public delegate object ObjectFactory(IServiceProvider serviceProvider, object?[]? arguments);

public static ObjectFactory CreateFactory (Type instanceType, Type[] argumentTypes);

public static object CreateInstance (IServiceProvider provider, Type instanceType, params object[] parameters);

public static T CreateInstance<T> (IServiceProvider provider, params object[] parameters);

public static object GetServiceOrCreateInstance (IServiceProvider provider, Type type);

public static T GetServiceOrCreateInstance<T> (IServiceProvider provider);

https://onthedrift.com/posts/activator-utilities/


